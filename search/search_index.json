{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Krish Singhvi's Course Notes","text":"<p>This is my home page. I will use it to organize and share my course notes.</p>"},{"location":"tutorials/rust-setup/","title":"Setting up a dev container for Rust","text":"<p>A helpful guide for setting up a Rust project with a Git repository and a dev container. We will create a \"Hello COMP423!\" program.</p> <ul> <li> <p>Primary author: Krish Singhvi</p> </li> <li> <p>Reviewer: Sritan Vemuru</p> </li> </ul>"},{"location":"tutorials/rust-setup/#prerequisites","title":"Prerequisites","text":"<p>Installation Requirements before starting:</p> <ul> <li>Git </li> <li>Visual Studio - The Remote \u2013 Containers extension is needed.</li> <li>Docker</li> </ul>"},{"location":"tutorials/rust-setup/#step-by-step-instructions-for-creating-a-new-dev-container-project-for-rust","title":"Step-by-step instructions for creating a new Dev Container project for Rust","text":""},{"location":"tutorials/rust-setup/#step-1","title":"Step 1","text":"<p>Open terminal and create a directory for your Rust project:</p> <pre><code>mkdir rust-hello-world\ncd rust-hello-world\n</code></pre>"},{"location":"tutorials/rust-setup/#step-2","title":"Step 2","text":"<p>You need to initialize a new Git repository:</p> <pre><code>git init\n</code></pre>"},{"location":"tutorials/rust-setup/#step-3","title":"Step 3","text":"<p>Create your Github Repository</p> <p>(1) Log in to your GitHub account and navigate to the Create a New Repository page.</p> <p>(2) Fill in the details as follows:</p> <p>Repository Name: rust-hello-world Description: \"Hello World Project in Rust.\" Visibility: Public</p> <p>(3) Once you have done that, in terminal link it to your local project:</p> <p><pre><code>git remote add origin https://github.com/&lt;your-username&gt;/rust-hello-world.git\n</code></pre> Replace <code>&lt;your-username&gt;</code> with your GitHub username.</p>"},{"location":"tutorials/rust-setup/#step-4","title":"Step 4","text":"<p>Now create a Dev Container configuration for your project:</p> <ul> <li>Create a .devcontainer folder </li> <li>Create a devcontainer.json file:</li> </ul> <pre><code>mkdir .devcontainer\ntouch .devcontainer/devcontainer.json\n</code></pre> <ul> <li>In your editor open the devcontainer.json file and add the configuration:</li> </ul> <pre><code>{\n  \"name\": \"Rust Dev Container\",\n  \"image\": \"mcr.microsoft.com/vscode/devcontainers/base:ubuntu\",\n  \"features\": {\n    \"ghcr.io/devcontainers/features/rust\": {}\n  },\n  \"customizations\": {\n    \"vscode\": {\n      \"extensions\": [\"rust-lang.rust-analyzer\"]\n    }\n  }\n}\n</code></pre> <ul> <li>Now save the file and reopen the project in the container by pressing Ctrl+Shift+P, typing \"Dev Containers: Reopen in Container\" and selecting the option.</li> </ul>"},{"location":"tutorials/rust-setup/#step-5","title":"Step 5","text":"<p>Check to see that Rust is installed and working in the Dev Container:</p> <ul> <li>Open terminal in Visual Studio and run:</li> </ul> <pre><code>rustc --version \n</code></pre> <p>The output you recieve should be similar to this:</p> <pre><code>rustc 1.x.x (some-hash YYYY-MM-DD)\n</code></pre> <p>Success</p> <p>If this is shown Rust has been installed and you can use it in your Dev Container. !!!</p>"},{"location":"tutorials/rust-setup/#steps-to-create-a-new-project-write-a-basic-hello-comp423-program-compile-and-run","title":"Steps to create a new project, write a basic \"Hello COMP423\" program, compile, and run","text":""},{"location":"tutorials/rust-setup/#step-1_1","title":"Step 1","text":"<p>Create a new Rust project using Cargo: </p> <ul> <li>Run the following command to initialize a new Cargo project:</li> </ul> <p><pre><code>cargo new hello-comp423 --vcs none\n</code></pre> This makes a new folder called hello-comp423 that has the default structure for a Rust project.</p> <ul> <li>Navigate into the project directory:</li> </ul> <pre><code>cd hello-comp423\n</code></pre> <p>The Cargo.toml file contains metadata about the project, and src/main.rs is where you\u2019ll write your program.</p>"},{"location":"tutorials/rust-setup/#step-2_1","title":"Step 2","text":"<p>Write the \"Hello, COMP423!\" program:</p> <ul> <li>Open the src/main.rs file in your project directory. Delete everything in it and write in the following code: <pre><code>fn main() {\n    println!(\"Hello COMP423!\");\n}\n</code></pre> Save the file. This is the basic Rust program, which prints \"Hello, COMP423!\".</li> </ul>"},{"location":"tutorials/rust-setup/#step-3_1","title":"Step 3","text":"<p>Compile and run the program:</p> <ul> <li> <p>To compile the program: <pre><code>      cargo build\n</code></pre></p> </li> <li> <p>To execute the compiled program: <pre><code>      ./target/debug/hello-comp423\n</code></pre> You should see the output: <pre><code>      Hello COMP423!\n</code></pre></p> </li> <li> <p>Also you can, you can compile and run the program in one step using: <pre><code>      cargo run\n</code></pre> This will both build the program and immediately execute it, giving the output: <pre><code>      Hello COMP423!\n</code></pre></p> </li> <li> <p>Cargo build: This command compiles the program and generates an executable file in the target/debug directory.</p> </li> <li>Cargo run: This command combines building and executing the program in a single step.</li> </ul>"},{"location":"tutorials/rust-setup/#step-4_1","title":"Step 4","text":"<ul> <li>Stage files and the add a README: <pre><code>    echo \"https://krishsinghvi.github.io/comp423-course-notes/tutorials/rust-setup/\" &gt; README.md\n    git add .\n</code></pre></li> <li>Add configs and commit: <pre><code>    git config user.name --global \"your-username-here\"\n    git config user.email --global \"your-email-here\"\n    git commit -m \"your-message-here\n</code></pre></li> <li>Push to remote: <pre><code>    git branch -M main\n    git push --set-upstream origin main\n</code></pre> We have finished!</li> </ul>"}]}